name: Python package Lint+Test+Build

on:
  push:
    branches: [ "dev" ]
  pull_request:
    branches: [ "dev" ]

jobs:
  ci:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: true
      matrix:
        python-version: [ "3.10", "3.11", "3.12", "3.13" ]
        # os: [ ubuntu-latest, windows-latest, macos-14 ]
        os: [ ubuntu-latest, windows-latest ]  # Ahh... Why macOS is so expensive for CI builds...
    steps:
      - uses: actions/checkout@v5

      # Set up the environment for the extension build on macOS and Windows
      # This OS doesn't compile the extension for `{many,musl}linux` distributions in containers
      - name: Set up 'BUILD_RUST_IMPL' environment variable
        if: runner.os == 'Linux'
        shell: bash
        run: echo "BUILD_RUST_IMPL=1" >> $GITHUB_ENV

      - name: Install uv
        uses: astral-sh/setup-uv@v6
        with:
          python-version: ${{ matrix.python-version }}
          version: "latest"
          enable-cache: true

      - name: Rust cache
        uses: Swatinem/rust-cache@v2

      - name: Prepare the project (Windows and macOS)
        if: runner.os == 'Windows' || runner.os == 'macOS'
        shell: bash
        run: uv sync --extra dev --extra tests --verbose

      - name: Prepare the project (Linux py3.13)
        if: runner.os == 'Linux' && matrix.python-version == '3.13'
        env:
          BUILD_RUST_IMPL: "1"
        shell: bash
        run: uv sync --extra dev --extra tests --verbose

      - name: Prepare the project (Linux !py3.13)
        if: runner.os == 'Linux' && matrix.python-version != '3.13'
        env:
          BUILD_RUST_IMPL: "0"
        shell: bash
        run: uv sync --extra dev --extra tests --verbose

      - name: Minimize uv cache
        shell: bash
        run: uv cache prune --ci

      - name: Lint
        shell: bash
        run: make lint

      - name: Test
        shell: bash
        run: make test

      - name: Build the package (Windows and macOS)
        if: runner.os == 'Windows' || runner.os == 'macOS'
        shell: bash
        env:
          BUILD_RUST_IMPL: "0"
        run: uv build --wheel

      - name: Build the package (Linux py3.13)
        if: runner.os == 'Linux' && matrix.python-version == '3.13'
        shell: bash
        run: uv build --wheel

      - name: Build the package (Linux !py3.13)
        if: runner.os == 'Linux' && matrix.python-version != '3.13'
        shell: bash
        env:
          BUILD_RUST_IMPL: "0"
        run: uv build --wheel

      - name: Verify wheel installation (Windows and macOS)
        if: runner.os == 'Windows' || runner.os == 'macOS'
        shell: bash
        run: |
          for wheel in dist/*.whl; do
            uv run --verbose --with $wheel --no-project --refresh-package ftl_extract -- python -c "import ftl_extract; print(ftl_extract.__version__)"
            uv run --verbose --with $wheel --no-project --refresh-package ftl_extract -- ftl --version
          done

      - name: Verify wheel installation (Linux py3.13)
        if: runner.os == 'Linux' && matrix.python-version == '3.13'
        shell: bash
        run: |
          for wheel in dist/*.whl; do
            uv run --verbose --with $wheel --no-project --refresh-package ftl_extract -- python -c "import ftl_extract; print(ftl_extract.__version__)"
            uv run --verbose --with $wheel --no-project --refresh-package ftl_extract -- ftl --version
            uv run --verbose --with $wheel --no-project --refresh-package ftl_extract -- fast-ftl-extract --version
          done

      - name: Verify wheel installation (Linux !py3.13)
        if: runner.os == 'Linux' && matrix.python-version != '3.13'
        shell: bash
        run: |
          for wheel in dist/*.whl; do
            uv run --verbose --with $wheel --no-project --refresh-package ftl_extract -- python -c "import ftl_extract; print(ftl_extract.__version__)"
            uv run --verbose --with $wheel --no-project --refresh-package ftl_extract -- ftl --version
          done

  extension-build:
    # Wait for the `ci` job to finish to save resources and money if `ci` can't compile the extension 🤷‍♂️
    needs: ci
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: true
      matrix:
        # os: [ ubuntu-latest, ubuntu-24.04-arm, windows-latest, macos-14 ]
        os: [ ubuntu-latest, ubuntu-24.04-arm, windows-latest ]  # Ahh... Why macOS is so expensive for CI builds...
    steps:
      - uses: actions/checkout@v5

      # Set up the environment for the extension build on macOS and Windows
      # This OS doesn't compile the extension for `{many,musl}linux` distributions in containers
      - name: Set up 'BUILD_RUST_IMPL' environment variable
        if: runner.os == 'Windows' || runner.os == 'macOS'
        shell: bash
        run: echo "BUILD_RUST_IMPL=1" >> $GITHUB_ENV

      - name: Install uv
        uses: astral-sh/setup-uv@v6
        with:
          python-version: "3.13"
          version: "latest"
          enable-cache: true

      - name: Rust cache
        uses: Swatinem/rust-cache@v2

      - name: Prepare the project
        shell: bash
        run: uv sync --extra dev --extra tests --verbose

      - name: Minimize uv cache
        run: uv cache prune --ci

      - name: Build and fix wheels
        if: runner.os == 'Windows' || runner.os == 'macOS'
        shell: bash
        run: |
          uv run cibuildwheel --config-file pyproject.toml --output-dir wheelhouse
          for wheel in wheelhouse/*.whl; do
            uv run wheel tags --python-tag py3 --abi-tag none --remove $wheel
          done

      - name: Build and fix wheels (Linux x86_64)
        if: matrix.os == 'ubuntu-latest'
        shell: bash
        run: |
          uv run cibuildwheel --config-file pyproject.toml --archs x86_64 --output-dir wheelhouse
          for wheel in wheelhouse/*.whl; do
            uv run wheel tags --python-tag py3 --abi-tag none --remove $wheel
          done

      - name: Build and fix wheels (Linux aarch64)
        if: matrix.os == 'ubuntu-24.04-arm'
        shell: bash
        run: |
          uv run cibuildwheel --config-file pyproject.toml --archs aarch64 --output-dir wheelhouse
          for wheel in wheelhouse/*.whl; do
            uv run wheel tags --python-tag py3 --abi-tag none --remove $wheel
          done

      - name: Verify wheel installation
        if: runner.os == 'Windows' || runner.os == 'macOS'
        shell: bash
        run: |
          for wheel in wheelhouse/*.whl; do
            uv run --verbose --with $wheel --no-project --refresh-package ftl_extract -- fast-ftl-extract --version
          done

      # - name: Store artifacts
      #   uses: actions/upload-artifact@v4
      #   with:
      #     name: ftl_extract-${{ matrix.os }}-${{ github.run_id }}
      #     if-no-files-found: error
      #     path: wheelhouse/*.whl
