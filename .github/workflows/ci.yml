name: Python package Lint+Test+Build

on:
  push:
    branches: [ "master", "dev" ]
  pull_request:
    branches: [ "master", "dev" ]

jobs:
#  ci:
#    runs-on: ${{ matrix.os }}
#    env:
#      BUILD_RUST_IMPL: "0"
#    strategy:
#      fail-fast: true
#      matrix:
#        python-version: [ "3.9", "3.10", "3.11", "3.12", "3.13" ]
#        os: [ "ubuntu-latest", "macos-latest", "windows-latest" ]
#    steps:
#      - name: Checkout repository
#        uses: actions/checkout@v4
#
#      - name: Install uv
#        uses: astral-sh/setup-uv@v5
#        with:
#          python-version: ${{ matrix.python-version }}
#          version: "latest"
#          enable-cache: true
#
#      - name: Install the project
#        run: uv sync --extra dev --extra tests --verbose
#
#      - name: Minimize uv cache
#        run: uv cache prune --ci
#
#      - name: Lint
#        run: make lint
#
#      - name: Test
#        run: make test
#
#      - name: Build the package
#        run: uv build --wheel
#
#      - name: Verify wheel installation
#        run: |
#          uv run --verbose --with ftl_extract --no-project --refresh-package ftl_extract -- python -c "import ftl_extract; print(ftl_extract.__version__)"
#          uv run --verbose --with ftl_extract --no-project --refresh-package ftl_extract -- ftl-extract --version

  extension:
    runs-on: ${{ matrix.os }}
    env:
      BUILD_RUST_IMPL: "1"
      CIBW_BUILD: "cp313-*"
      CIBW_ARCHS: "auto64"
      CIBW_SKIP: "pp*"
      CIBW_BEFORE_ALL_LINUX: "curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y"
      CIBW_BEFORE_BUILD_LINUX: ". $HOME/.cargo/env && cargo build --release"
      CIBW_BUILD_VERBOSITY: 1
    strategy:
      fail-fast: true
      matrix:
      # os: [ "ubuntu-latest", "macos-latest", "windows-latest" ]
        os: [ "ubuntu-latest" ]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v5
        with:
          python-version: "3.13"
          version: "latest"
          enable-cache: true

      - name: Rust cache
        uses: Swatinem/rust-cache@v2

      - name: Install the project
        run: uv sync --extra dev --extra tests --verbose

      - name: Minimize uv cache
        run: uv cache prune --ci

      - name: Build the package
        run: |
          echo "Will I build rust impl: BUILD_RUST_IMPL=${{ env.BUILD_RUST_IMPL }}"
          uv run cibuildwheel --config-file pyproject.toml --output-dir wheelhouse

      - name: Fix wheel python and ABI tags
        run: |
          for wheel in wheelhouse/*.whl; do
            uv run wheel tags --python-tag py3 --abi-tag none --remove wheelhouse/$wheel
          done

      - name: Verify wheel installation
        run: |
          for wheel in wheelhouse/*.whl; do
            uv run --verbose --with $wheel --no-project -- fast-ftl-extract --version
          done

      - name: Store artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ftl_extract-${{ matrix.os }}-${{ matrix.python-version }}
          if-no-files-found: error
          path: |
            dist/*.whl
